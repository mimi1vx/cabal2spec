#
# spec file for package partial-handler
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name partial-handler

Name:           %{pkg_name}
Version:        1.0.2
Release:        0
Summary:        A composable exception handler
Group:          Development/Libraries/Haskell

License:        MIT
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros

%description
If you have ever had to compose an exception handler for exceptions of multiple
types, you know how frustraiting it can get. This library approaches this issue
by providing a composable exception handler type, which has instances of the
standard classes.

Composability means that you can define custom partial handlers and reuse them
by composing other handlers from them.

Here is an example of a composable partial handler, which only defines what to
do in case of a ThreadKilled exception (the code uses the LambdaCase
extension):

>ignoreThreadKilled :: PartialHandler () >ignoreThreadKilled = > typed $ case >
ThreadKilled -> Just $ return () > _ -> Nothing

Here's how you can construct a handler of type 'SomeException -> IO ()' using
this library:

>totalizeRethrowing $ > ignoreThreadKilled <> > onAlreadyExists (putStrLn
"Already exists")

and here is how you would do it traditionally (with the MultiWayIf extension):

>e -> if > | Just ThreadKilled <- fromException e -> > return () > | Just e' <-
fromException e, isAlreadyExistsError e' -> > putStrLn "Already exists" > |
otherwise -> > throwIO e

Putting all the syntactic trickery to make it shorter aside, this handler is a
monolith block of code. Unlike with PartialHandler you can neither decompose it
into simpler ones, nor compose it with other handlers to form a more complex
one.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
