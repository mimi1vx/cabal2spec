#
# spec file for package midi-music-box
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

Name:           midi-music-box
Version:        0.0.0.4
Release:        0
Summary:        Convert MIDI file to music box punch tape
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-diagrams-lib-devel
BuildRequires:  ghc-diagrams-postscript-devel
BuildRequires:  ghc-event-list-devel
BuildRequires:  ghc-midi-devel
BuildRequires:  ghc-non-empty-devel
BuildRequires:  ghc-optparse-applicative-devel
BuildRequires:  ghc-utility-ht-devel

%description
Convert MIDI file to music box punch tape for this kind of music box:
<http://www.amazon.de/Spieluhr-Lochstreifen/dp/B001WNZOVO/>

Run it like so:

> midi-music-box --output=song.ps song.mid

'song.mid' is the input file that must be a MIDI file. 'song.ps' is the output
file, a PostScript file. You can print it with a printer or to a PDF document
or convert it to many other formats. Currently, the output file must always
have the '.ps' filename extension. Other formats could be supported by adding
more of the 'diagrams-*' packages. However, this means you have to alter the
program.

The program will print the following symbols to the stripe:

* blue dot - correct note that should be punched

* # - this is a semitone and cannot be played accurately (at least on the type
of music box I refered to, above)

* ! - the note is outside the range

In case of notes outside the stripe you have to adapt the offset. You may write

> midi-music-box --zerokey=72 --output=song.ps song.mid

in order to make the MIDI note with number 72 the left-most note on the stripe.
Default is '--zerokey=60'. The number of notes in an octave is 12. If you use a
zerokey that is a multiple of 12 then white (piano) keys remain white, and
black keys remain black, so to speak. If zerokey is not a multiple of 12 then
white keys may become black an vice versa. Since the music box type considered
here only supports white keys, I recommend the following: If the song is in key
X major then lookup the MIDI note number for X and choose X plus or minus a
multiple of 12 as zerokey. If the song has key Y minor, then X=Y+3.

You find executables for MS Windows in two ZIP archives there:
<http://code.haskell.org/~thielema/midi-music-box/>.


%prep
%setup -q

%build
%ghc_bin_build

%install
%ghc_bin_install

%files
%doc LICENSE
%{_bindir}/%{name}

%changelog
