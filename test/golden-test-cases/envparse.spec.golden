#
# spec file for package envparse
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name envparse

%bcond_with tests

Name:           %{pkg_name}
Version:        0.4
Release:        0
Summary:        Parse environment variables
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-containers-devel
%if %{with tests}
BuildRequires:  ghc-hspec-devel
BuildRequires:  ghc-text-devel
%endif

%description
Here's a simple example of a program that uses 'envparse''s parser:

' module Main (main) where

import Control.Monad (unless) import Env

data Hello = Hello &#x7b; name :: String, quiet :: Bool &#x7d;

hello :: IO Hello hello = Env.parse (header "envparse example") $ &#x20; Hello
<$> var (str <=< nonempty) "NAME" (help "Target for the greeting") &#x20; <*>
switch "QUIET" (help "Whether to actually print the greeting") &#x20; main ::
IO () main = do &#x20; Hello &#x7b;name, quiet&#x7d; <- hello &#x20; unless
quiet $ &#x20; putStrLn ("Hello, " ++ name ++ "!") '

The 'NAME' environment variable is mandatory and contains the name of the
person to greet. 'QUIET', on the other hand, is an optional boolean flag, false
by default, that decides whether the greeting should be silent.

If the 'NAME' variable is undefined in the environment then running the program
will result in the following help text:

' envparse example &#x20; Available environment variables: &#x20; &#x20; NAME
Target for the greeting &#x20; QUIET Whether to actually print the &#x20;
greeting &#x20; Parsing errors: &#x20; &#x20; NAME is unset '.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%check
%cabal_test

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.markdown README.markdown example

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.markdown README.markdown example

%changelog
