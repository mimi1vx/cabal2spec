#
# spec file for package data-reify
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name data-reify

Name:           %{pkg_name}
Version:        0.6.1
Release:        0
Summary:        Reify a recursive data structure into an explicit graph
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-containers-devel

%description
'data-reify' provided the ability to turn recursive structures into explicit
graphs. Many (implicitly or explicitly) recursive data structure can be given
this ability, via a type class instance. This gives an alternative to using
'Ref' for observable sharing.

Observable sharing in general is unsafe, so we use the IO monad to bound this
effect, but can be used safely even with 'unsafePerformIO' if some simple
conditions are met. Typically this package will be used to tie the knot with
DSL's that depend of observable sharing, like Lava.

Providing an instance for 'MuRef' is the mechanism for allowing a structure to
be reified into a graph, and several examples of this are provided.

History: Version 0.1 used unsafe pointer compares. Version 0.2 of 'data-reify'
used 'StableName's, and was much faster. Version 0.3 provided two versions of
'MuRef', the mono-typed version, for trees of a single type, and the
dynamic-typed version, for trees of different types. Version 0.4 used 'Int' as
a synonym for 'Unique' rather than 'Data.Unique' for node ids, by popular
demand. Version 0.5 merged the mono-typed and dynamic version again, by using
'DynStableName', an unphantomized version of StableName.

&#169; 2009 Andy Gill; BSD3 license.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.md README.md

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.md README.md

%changelog
