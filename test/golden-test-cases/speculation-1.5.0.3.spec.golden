#
# spec file for package speculation
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name speculation

Name:           %{pkg_name}
Version:        1.5.0.3
Release:        0
Summary:        A framework for safe, programmable, speculative parallelism
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-stm-devel
BuildRequires:  ghc-transformers-devel

%description
A framework for safe, programmable, speculative parallelism, loosely based on:

* Prakash Prabhu, G. Ramalingam, and Kapil Vaswani, "/Safe Programmable
Speculative Parallelism/", In the proceedings of Programming Language Design
and Implementation (PLDI) Vol 45, Issue 6 (June 2010) pp 50-61.
<http://research.microsoft.com/pubs/118795/pldi026-vaswani.pdf>

This package provides speculative function application and speculative folds.
Speculative STM transactions take the place of the transactional rollback
machinery from the paper.

For example:

''spec' g f a' evaluates 'f g' while forcing 'a', if 'g == a' then 'f g' is
returned, otherwise 'f a' is evaluated and returned. Furthermore, if the
argument has already been evaluated, we skip the 'f g' computation entirely.
If a good guess at the value of 'a' is available, this is one way to induce
parallelism in an otherwise sequential task. However, if the guess isn't
available more cheaply than the actual answer, then this saves no work and if
the guess is wrong, you risk evaluating the function twice. Under high load,
since 'f g' is computed via the spark queue, the speculation will be skipped
and you will obtain the same answer as 'f $! a'.

The best-case timeline looks like:

> foreground: [----- a -----] > foreground: [-] (check g == a) > spark: [-----
f g -----] > overall: [--- spec g f a ---]

The worst-case timeline looks like:

> foreground: [----- a -----] > foreground: [-] (check g == a) > foreground:
[---- f a ----] > spark: [----- f g -----] > overall: [-------- spec g f a
---------]

Note that, if 'f g' takes longer than a to compute, in the HEAD release of GHC,
'f g' will be collected and killed during garbage collection.

> foreground: [----- a -----] > foreground: [-] (check g == a) > foreground:
[---- f a ----] > spark: [---- f g ----###### (#'s mark when this spark is
collectable) > overall: [--------- spec g f a --------]

Under high load:

> foreground: [----- a -----] > foreground: [-] (check g == a) > foreground:
[---- f a ----] > overall: [-------- spec g f a ---------]

Compare these to the timeline of 'f $! a':

> foreground: [----- a -----] > foreground: [---- f a ----] > orverall:
[---------- f $! a ---------]

'specSTM' provides a similar time table for STM actions, but also rolls back
side-effects. The one unfortunate operational distinction is that it is forced
to compute 'a' in the background thread and therefore degrades slightly less
gracefully under load, although we mitigate this effect by only enqueuing if
the number of sparks for the current capability is lower than the total number
of capabilities, to try to avoid wasting time when all computational resources
are in use.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.markdown README.markdown

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.markdown README.markdown

%changelog
