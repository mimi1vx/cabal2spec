#
# spec file for package language-haskell-extract
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name language-haskell-extract

Name:           %{pkg_name}
Version:        0.2.4
Release:        0
Summary:        Module to automatically extract functions from the local code
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-regex-posix-devel
BuildRequires:  ghc-template-haskell-devel

%description
'language-haskell-extract' contains some useful helper functions on top of
Template Haskell.

'functionExtractor' extracts all functions after a regexp-pattern.

> foo = "test" > boo = "testing" > bar = $(functionExtractor "oo$")

will automagically extract the functions ending with 'oo' such as

> bar = [("foo",foo), ("boo",boo)]

This can be useful if you wish to extract all functions beginning with test
(for a test-framework) or all functions beginning with wc (for a web service).

'functionExtractorMap' works like 'functionsExtractor' but applies a function
over all function-pairs.

This functions is useful if the common return type of the functions is a type
class.

Example:

> secondTypeclassTest = > do let expected = ["45", "88.8", ""hej""] > actual =
$(functionExtractorMap "^tc" [|n f -> show f|] ) > expected '=? actual > >
tcInt :: Integer > tcInt = 45 > > tcDouble :: Double > tcDouble = 88.8 > >
tcString :: String > tcString = "hej".


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development
files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc BSD3.txt

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc BSD3.txt

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
