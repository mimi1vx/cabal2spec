#
# spec file for package Workflow
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name Workflow

Name:           %{pkg_name}
Version:        0.8.3
Release:        0
Summary:        Workflow patterns over a monad for thread state logging & recovery
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-RefSerialize-devel
BuildRequires:  ghc-TCache-devel
BuildRequires:  ghc-binary-devel
BuildRequires:  ghc-bytestring-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-directory-devel
BuildRequires:  ghc-exceptions-devel
BuildRequires:  ghc-extensible-exceptions-devel
BuildRequires:  ghc-mtl-devel
BuildRequires:  ghc-old-time-devel
BuildRequires:  ghc-stm-devel
BuildRequires:  ghc-vector-devel

%description
Transparent support for interruptible computations. A workflow can be seen as a
persistent thread that executes a monadic computation. Therefore, it can be
used in very time consuming computations such are CPU intensive calculations or
procedures that are most of the time waiting for the action of a process or an
user, that are prone to comunication failures, timeouts or shutdowns.
It also can be used if you like to restart your program at the point where the
user left it last time . . The computation can be restarted at the interrupted
point thanks to its logged state in permanent storage. The thread state is
located in files by default. It can be moved and continued in another computer.
Besides that, the package also provides other higher level services associated
to workflows: Workflow patterns, and a general configuarion utility, workflow
observation events and references to the internal state. The state can be
stored maintaining memory references (using the "RefSerialize" package), so
that it is possible to track the modifications of a big structure (for example
a document) along the workflow execution.

See "Control.Workflow" for details

In this release: * Adaptation for MonadMask instance introduced in the package
exceptions-0.6.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
