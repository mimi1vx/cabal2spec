#
# spec file for package auto
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name auto

Name:           %{pkg_name}
Version:        0.4.3.1
Release:        0
Summary:        Denotative, locally stateful programming DSL & platform
Group:          Development/Libraries/Haskell

License:        MIT
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-MonadRandom-devel
BuildRequires:  ghc-base-orphans-devel
BuildRequires:  ghc-bytestring-devel
BuildRequires:  ghc-cereal-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-deepseq-devel
BuildRequires:  ghc-profunctors-devel
BuildRequires:  ghc-random-devel
BuildRequires:  ghc-semigroups-devel
BuildRequires:  ghc-transformers-devel

%description
(Up to date documentation is maintained at <https://mstksg.github.com/auto>)

Read the README first! <https://github.com/mstksg/auto/blob/master/README.md> ,
for motivating examples, and concrete explanations of things described here.

/auto/ is a Haskell DSL and platform providing declarative, compositional,
denotative semantics for discrete-step, locally stateful, interactive programs,
games, and automations, with implicitly derived serialization. It is suited for
any domain where either the input or the output can be described as a stream of
values: a stream of input events, output views, etc.

/auto/ works by providing a type that encapsulates "value stream transformers",
or locally stateful functions; by specifying your program as a (potentially
cyclic) graph of relationships between value streams, you create a way of
"declaring" a system based simply on static relationships between quantities.

Instead of a "state monad" type solution, where all functions have access to a
rigid global state, /auto/ works by specifying relationships which each exist
independently and on their own, without any global state.

A more fuller exposition is in the `README.md`, in this project directory and
also online at <https://github.com/mstksg/auto/blob/master/README.md>; you can
get started by reading the tutorial, which is also in this project directory in
the `tutorial` directory, and also incidentally online at
<https://github.com/mstksg/auto/blob/master/tutorial/tutorial.md>.
Also, check out the <https://github.com/mstksg/auto-examples auto-examples>
repository on github for plenty of real-world and toy examples to learn from;
I've also done a <http://blog.jle.im/entries/series/+all-about-auto blog
series> on this library, with examples and full tutorials!

Support available on freenode's #haskell-auto, #haskell-game, and also on the
github issue tracker for the source repository.

Import "Control.Auto" to begin!.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.md README.md

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.md README.md

%changelog
