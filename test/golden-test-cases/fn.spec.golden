#
# spec file for package fn
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name fn

%bcond_with tests

Name:           %{pkg_name}
Version:        0.3.0.2
Release:        0
Summary:        A functional web framework
Group:          Development/Libraries/Haskell

License:        ISC
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-blaze-builder-devel
BuildRequires:  ghc-bytestring-devel
BuildRequires:  ghc-directory-devel
BuildRequires:  ghc-filepath-devel
BuildRequires:  ghc-http-types-devel
BuildRequires:  ghc-resourcet-devel
BuildRequires:  ghc-text-devel
BuildRequires:  ghc-unordered-containers-devel
BuildRequires:  ghc-wai-devel
BuildRequires:  ghc-wai-extra-devel
%if %{with tests}
BuildRequires:  ghc-hspec-devel
%endif

%description
A Haskell web framework where you write plain old functions.

/Provided you have/ <https://github.com/commercialhaskell/stack#readme stack>
/installed, you can run this example like a shell script (it'll listen on port
3000):/

' #!/usr/bin/env stack -- stack --resolver lts-5.5 --install-ghc runghc
--package fn --package warp &#123;-&#35; LANGUAGE OverloadedStrings
&#35;-&#125; import Data.Monoid ((&#60;&#62;)) import Data.Text (Text) import
Network.Wai (Response) import Network.Wai.Handler.Warp (run) import Web.Fn

data Ctxt = Ctxt &#123; _req :: FnRequest &#125; instance RequestContext Ctxt
where &#32; getRequest = _req &#32; setRequest c r = c &#123; _req = r &#125;

initializer :: IO Ctxt initializer = return (Ctxt defaultFnRequest)

main :: IO () main = do ctxt <- initializer &#32; run 3000 $ toWAI ctxt site

site :: Ctxt -> IO Response site ctxt = route ctxt [ end ==> indexH &#32; ,
path &#34;echo&#34; // param &#34;msg&#34; ==> echoH &#32; , path
&#34;echo&#34; // segment ==> echoH &#32; ] &#32; `fallthrough` notFoundText
&#34;Page not found.&#34;

indexH :: Ctxt -> IO (Maybe Response) indexH _ = okText &#34;Try visiting
/echo?msg='hello' or /echo/hello&#34;

echoH :: Ctxt -> Text -> IO (Maybe Response) echoH _ msg = okText $
&#34;Echoing '&#34; &#60;&#62; msg &#60;&#62; &#34;'.&#34; '



Fn lets you write web code that just looks like normal Haskell code.

* An application has some "context", which must contain a 'Request', but can
contain other data as well, like database connection pools, etc. This context
will be passed to each of your handlers, updated with the current HTTP Request.

* Routes are declared to capture parameters and/or segments of the url, and
then routed to handler functions that have the appropriate number and type of
arguments. These functions return 'IO (Maybe Response)', where 'Nothing'
indicates to Fn that you want it to keep looking for matching routes.

* All handlers just use plain old 'IO', which means it is easy to call them
from GHCi, 'forkIO', etc.

* All of this is a small wrapper around the WAI interface, so you have the
flexilibility to do anything you need to do with HTTP.

The name comes from the fact that Fn emphasizes functions (over monads), where
all necessary data is passed via function arguments, and control flow is
mediated by return values.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%check
%cabal_test

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.md README.md

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.md README.md

%changelog
