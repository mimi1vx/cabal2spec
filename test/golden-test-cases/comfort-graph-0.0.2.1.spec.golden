#
# spec file for package comfort-graph
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name comfort-graph

%bcond_with tests

Name:           %{pkg_name}
Version:        0.0.2.1
Release:        0
Summary:        Graph structure with type parameters for nodes and edges
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-QuickCheck-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-transformers-devel
BuildRequires:  ghc-utility-ht-devel

%description
This graph structure is based on "Data.Map" and allows any 'Ord' type for nodes
and allows directed, undirected and more edge types. There is no need to map
nodes to integer numbers. This makes handling in applications much more
comfortable, thus the package name.

Currently the package does not contain any advanced algorithm, just the data
structure and some manipulation functions.

The edge type can be freely chosen. This allows great flexibility but it is a
bit more cumbersome to do in Haskell 98. Examples of edge types:

* 'DirEdge': Edges in a directed graph

* 'UndirEdge': Edges in an undirected graph

* 'EitherEdge': For graphs containing both directed and undirected edges

* You may define an edge type with an additional identifier in order to support
multiple edges between the same pair of nodes.

* Using type functions on the node type you may even define an edge type for
nodes from a Cartesian product, where only "horizontal" and "vertical" edges
are allowed.

For examples see the 'linear-circuit' package and its tests. The 'ResistorCube'
test demonstrates non-integer node types and the 'Tree' test demonstrates
multigraphs.

The package is plain Haskell 98.

Related packages:

* 'fgl': standard package for graph processing with many graph algorithms but
cumbersome data structure with Int numbered nodes.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%check
%cabal_test

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
