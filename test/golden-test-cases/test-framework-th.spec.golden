#
# spec file for package test-framework-th
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name test-framework-th

Name:           %{pkg_name}
Version:        0.2.4
Release:        0
Summary:        Automagically generate the HUnit- and Quickcheck-bulk-code using Template Haskell
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-haskell-src-exts-devel
BuildRequires:  ghc-language-haskell-extract-devel
BuildRequires:  ghc-regex-posix-devel
BuildRequires:  ghc-template-haskell-devel
BuildRequires:  ghc-test-framework-devel

%description
'test-framework-th' contains two interesting functions: 'defaultMainGenerator'
and 'testGroupGenerator'.

'defaultMainGenerator' will extract all functions beginning with case_, prop_
or test_in the module and put them in a testGroup.

> -- file SomeModule.hs > ( -# LANGUAGE TemplateHaskell #- ) > module
SomeModule where > import Test.Framework.TH > import Test.Framework > import
Test.HUnit > import Test.Framework.Providers.HUnit > import
Test.Framework.Providers.QuickCheck2 > > -- observe this line! > main =
$(defaultMainGenerator) > case_1 = do 1 '=? 1 > case_2 = do 2 '=? 2 >
prop_reverse xs = reverse (reverse xs) == xs > where types = xs::[Int]

is the same as

> -- file SomeModule.hs > ( -# LANGUAGE TemplateHaskell #- ) > module
SomeModule where > import Test.Framework.TH > import Test.Framework > import
Test.HUnit > import Test.Framework.Providers.HUnit > import
Test.Framework.Providers.QuickCheck2 > > -- observe this line! > main = >
defaultMain [ > testGroup "SomeModule" [ testCase "1" case_1, testCase "2"
case_2, testProperty "reverse" prop_reverse] > ] > > case_1 = do 1 '=? 1 >
case_2 = do 2 '=? 2 > prop_reverse xs = reverse (reverse xs) == xs > where
types = xs::[Int]

'testGroupGenerator' is like 'defaultMainGenerator' but without 'defaultMain'.
It is useful if you need a function for the testgroup (e.g. if you want to be
able to call the testgroup from another module).


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc BSD3.txt

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc BSD3.txt

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
