#
# spec file for package codo-notation
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name codo-notation

Name:           %{pkg_name}
Version:        0.5.2
Release:        0
Summary:        A notation for comonads, analogous to the do-notation for monads
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-comonad-devel
BuildRequires:  ghc-haskell-src-meta-devel
BuildRequires:  ghc-parsec-devel
BuildRequires:  ghc-template-haskell-devel
BuildRequires:  ghc-uniplate-devel

%description
A notation for comonads, analogous to the do-notation for monads.

Requires the 'TemplateHaskell' and 'QuasiQuotes' extensions.

Example 1:

' &#x7b;-# LANGUAGE TemplateHaskell #-&#x7d; &#x7b;-# LANGUAGE QuasiQuotes
#-&#x7d;

import Control.Comonad import Language.Haskell.Codo

foo :: (Comonad c, Num a) => c a -> a foo = [codo| x => extract x + 1 |] '

Example 2:

' import Data.Monoid instance Monoid Double where &#x20;&#x20;&#x20; mempty =
0.0 &#x20;&#x20;&#x20; mappend = (+)

differentiate f = ((f 0.001) - f 0) / 0.001

minima :: (Double -> Double) -> Bool minima = [codo| f => f' <- differentiate f
&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;
f'' <- differentiate f'
&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;
(extract f' &#60; 0.001) && (extract f'' &#62; 0) |] '

Further explanation of the syntax can be found in the following (short) paper:
<http://www.cl.cam.ac.uk/~dao29/drafts/codo-notation-orchard-ifl12.pdf> with a
numer of examples.

Further examples can be found here:
<https://github.com/dorchard/codo-notation>.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)

%changelog
