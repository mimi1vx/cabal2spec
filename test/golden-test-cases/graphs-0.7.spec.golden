#
# spec file for package graphs
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name graphs

Name:           %{pkg_name}
Version:        0.7
Release:        0
Summary:        A simple monadic graph library
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-array-devel
BuildRequires:  ghc-containers-devel
BuildRequires:  ghc-transformers-compat-devel
BuildRequires:  ghc-transformers-devel
BuildRequires:  ghc-void-devel

%description
A "not-very-Haskelly" API for calculating traversals of graphs that may be too
large to fit into memory. The algorithms included are inspired by the visitor
concept of the
<http://www.boost.org/doc/libs/1_57_0/libs/graph/doc/visitor_concepts.html
Boost Graph Library>.

Here is a very simple example of how we might execute a depth-first-search.
In this case the visitor simply collects the edges and vertices in the order
that the corresponding functions get called. After the necessary imports,

> import Data.Array > import Data.Monoid > import Data.Graph.AdjacencyList >
import Data.Graph.Algorithm > import Data.Graph.Algorithm.DepthFirstSearch

create an adjacency list where the vertices are labeled with integers.

> graph :: Array Int [Int] > graph = array (0, 3) [(0, [1,2]), (1, [3]), (2,
[3]), (3, [])]

<<http://i.imgur.com/Pod1SH0.png>>

We need a data structure that instantiates `Monoid` to combine the results of
our visitor functions.

' data Orderings = Orderings &#32;&#32;&#123;&#32;&#32;enterV :: [Int]
&#32;&#32;, enterE :: [(Int, Int)] &#32;&#32;, gray :: [(Int, Int)] &#32;&#32;,
exitV :: [Int] &#32;&#32;, black :: [(Int, Int)] &#32;&#32;&#125;&#32;deriving
Show

instance Monoid Orderings where &#32;mempty = Orderings [] [] [] [] []
&#32;mappend (Orderings a1 a2 a3 a4 a5)(Orderings b1 b2 b3 b4 b5) =
&#32;&#32;Orderings (a1 ++ b1) (a2 ++ b2) (a3 ++ b3) (a4 ++ b4) (a5 ++ b5) '

The `dfs` function's first argument is of type `GraphSearch` which is a visitor
containing the functions to be run at various times during the search.
The second argument is the starting vertex for the search.

' orderings :: GraphSearch (AdjacencyList Int) Orderings orderings =
GraphSearch &#32;&#32;(v -> return $ mempty &#123;enterV = [v]&#125;
&#32;&#32;(e -> return $ mempty &#123;enterE = [e]&#125; &#32;&#32;(e -> return
$ mempty &#123;gray = [e]&#125; &#32;&#32;(v -> return $ mempty &#123;exitV =
[v]&#125; &#32;&#32;(e -> return $ mempty &#123;black = [e]&#125; '

Finally `runAdjacencylist` unwraps the function in the `Adjacencylist` newtype
and runs it on `graph`.

> dfsTest :: Orderings > dfsTest = runAdjacencyList (dfs orderings 0) graph

Running `dfsTest` in ghci will yield:

' Orderings &#123;enterV = [0,2,3,1], enterE = [(0,2),(2,3),(0,1)], gray = [],
exitV = [3,2,1,0], black = [(1,3)]&#125; '.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGELOG.markdown README.markdown

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGELOG.markdown README.markdown

%changelog
