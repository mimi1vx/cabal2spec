#
# spec file for package dual-tree
#
# Copyright (c) 2018 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

%global pkg_name dual-tree

%bcond_with tests

Name:           %{pkg_name}
Version:        0.2.1
Release:        0
Summary:        Rose trees with cached and accumulating monoidal annotations
Group:          Development/Libraries/Haskell

License:        BSD-3-Clause
Url:            https://hackage.haskell.org/package/%{name}
Source0:        https://hackage.haskell.org/package/%{name}-%{version}/%{name}-%{version}.tar.gz

BuildRequires:  ghc-Cabal-devel
BuildRequires:  ghc-rpm-macros
BuildRequires:  ghc-monoid-extras-devel
BuildRequires:  ghc-newtype-generics-devel
BuildRequires:  ghc-semigroups-devel
%if %{with tests}
BuildRequires:  ghc-QuickCheck-devel
BuildRequires:  ghc-testing-feat-devel
%endif

%description
Rose (n-ary) trees with both upwards- (/i.e./ cached) and downwards-traveling
(/i.e./ accumulating) monoidal annotations. This is used as the core data
structure underlying the 'diagrams' framework
(<http://projects.haskell.org/diagrams>), but potentially has other
applications as well.

Abstractly, a DUALTree is a rose (n-ary) tree with data (of type 'l') at
leaves, data (of type 'a') at internal nodes, and two types of monoidal
annotations, one (of type 'u') travelling "up" the tree and one (of type 'd')
traveling "down".

See "Data.Tree.DUAL" for full documentation. "Data.Tree.DUAL" provides a public
API which should suffice for most purposes. "Data.Tree.DUAL.Internal" exports
more of the internal implementation---use it at your own risk.


%package -n ghc-%{name}
Summary:        Haskell %{name} library
Group:          System/Libraries

%description -n ghc-%{name}
This package provides the Haskell %{name} shared library.


%package -n ghc-%{name}-devel
Summary:        Haskell %{name} library development files
Group:          Development/Libraries/Haskell
Requires:       ghc-compiler = %{ghc_version}
Requires(post): ghc-compiler = %{ghc_version}
Requires(postun): ghc-compiler = %{ghc_version}
Requires:       ghc-%{name} = %{version}-%{release}

%description -n ghc-%{name}-devel
This package provides the Haskell %{name} library development files.


%prep
%setup -q

%build
%ghc_lib_build

%install
%ghc_lib_install

%check
%cabal_test

%post -n ghc-%{name}-devel
%ghc_pkg_recache

%postun -n ghc-%{name}-devel
%ghc_pkg_recache

%files
%doc LICENSE
%doc CHANGES

%files -n ghc-%{name} -f ghc-%{name}.files
%defattr(-,root,root,-)
%doc LICENSE

%files -n ghc-%{name}-devel -f ghc-%{name}-devel.files
%defattr(-,root,root,-)
%doc CHANGES

%changelog
